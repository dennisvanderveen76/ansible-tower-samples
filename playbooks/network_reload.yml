---
- name: Save Running Config and Reload Cisco IOS Devices (One at a Time)
  hosts: cisco_ios # Replace with your inventory group for Cisco IOS devices
  gather_facts: false      # Disable default fact gathering

  # This is the key: Process only one host at a time
  serial: 1

  vars:
    ansible_connection: network_cli
    reconnect_delay_seconds: 300 # Initial delay (in seconds) before checking for connectivity (e.g., 5 minutes)
    reconnect_timeout_seconds: 900 # Total timeout (in seconds) for device to come back online (e.g., 15 minutes)
    ansible_network_os: ios

  tasks:
    - name: Save running configuration to startup-config on {{ ansible_host }}
      cisco.ios.ios_config:
        save_when: changed # This explicitly saves the running config to startup-config
      when: not ansible_check_mode # Don't save in check mode

    - name: Execute reload command on {{ ansible_host }}
      ansible.netcommon.cli_command:
        command: "reload\n"
      when: not ansible_check_mode

    - name: Wait for device {{ ansible_host }} to reboot and become available via SSH
      ansible.builtin.wait_for:
        port: 22
        host: "{{ ansible_host }}"
        delay: "{{ reconnect_delay_seconds }}"
        timeout: "{{ reconnect_timeout_seconds }}"
        state: started
      when: not ansible_check_mode

    - name: Verify device {{ ansible_host }} is reachable and get uptime after reload (optional)
      ansible.netcommon.cli_command:
        command: "show version | include uptime"
      register: uptime_after_reload
      when: not ansible_check_mode

    - name: Display uptime for {{ ansible_host }} after successful reload (optional)
      ansible.builtin.debug:
        msg: "Device {{ ansible_host }} successfully reloaded. New Uptime: {{ uptime_after_reload.stdout | default('N/A') }}"
      when: not ansible_check_mode