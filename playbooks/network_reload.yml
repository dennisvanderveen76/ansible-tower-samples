---
- name: Save Running Config and Reload Cisco IOS Devices (One at a Time)
  hosts: cisco_ios # Replace with your inventory group for Cisco IOS devices
  gather_facts: false      # Disable default fact gathering

  # This is the key: Process only one host at a time
  serial: 1

  vars:
    ansible_connection: network_cli
    reconnect_delay_seconds: 70 # Initial delay (in seconds) before checking for connectivity (e.g., 5 minutes)
    reconnect_timeout_seconds: 70 # Total timeout (in seconds) for device to come back online (e.g., 15 minutes)
    ansible_network_cli_connect_timeout: 70
    ansible_network_os: ios
    desired_config_register: "0x2102"

  tasks:
    - name: Get current configuration register value
      ansible.netcommon.cli_command:
        command: "show version | include Configuration register"
      register: current_confreg_output
      when: not ansible_check_mode # Only run in actual execution

    - name: Parse current configuration register value
      ansible.builtin.set_fact:
        # Use a safe filter chain:
        # 1. default('') to handle cases where stdout[0] might not exist.
        # 2. regex_search() will return an empty list if no match.
        # 3. | default([]) to ensure 'match' is always a list for | first.
        # 4. | first | default('UNKNOWN') to handle empty list or no match.
        current_confreg: >-
          {% set raw_line = current_confreg_output.stdout[0] | default('') %}
          {% set match = raw_line | regex_search('0x[0-9a-fA-F]+', '\\g<0>') %}
          {% if match %}
            {{ match | first }}
          {% else %}
            # If no '0x...' found, assume it's 'UNKNOWN'
            # This will force the 'config-register' change in the next step
            "UNKNOWN"
          {% endif %}
      when:
        - not ansible_check_mode
        - current_confreg_output.stdout is defined and current_confreg_output.stdout | length > 0

    - name: Change configuration register to boot normally ({{ desired_config_register }})
      cisco.ios.ios_config:
        lines:
          - "config-register {{ desired_config_register }}"
      when:
        - not ansible_check_mode
        - current_confreg != desired_config_register # Only change if needed

    - name: Save running configuration to startup-config on {{ ansible_host }}
      cisco.ios.ios_config:
        save_when: changed # This explicitly saves the running config to startup-config
      when: not ansible_check_mode # Don't save in check mode

    - name: Execute reload command on {{ ansible_host }}
      ansible.netcommon.cli_command:
        command: "reload immediate noconfirm"
      when: not ansible_check_mode

    - name: Wait for device {{ ansible_host }} to reboot and become available via SSH
      ansible.builtin.wait_for:
        port: 22
        host: "{{ ansible_host }}"
        delay: "{{ reconnect_delay_seconds }}"
        timeout: "{{ reconnect_timeout_seconds }}"
        state: started
      when: not ansible_check_mode

    - name: Verify device {{ ansible_host }} is reachable and get uptime after reload (optional)
      ansible.netcommon.cli_command:
        command: "show version | include uptime"
      register: uptime_after_reload
      when: not ansible_check_mode

    - name: Display uptime for {{ ansible_host }} after successful reload (optional)
      ansible.builtin.debug:
        msg: "Device {{ ansible_host }} successfully reloaded. New Uptime: {{ uptime_after_reload.stdout | default('N/A') }}"
      when: not ansible_check_mode